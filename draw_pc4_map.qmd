---
title: "Draw postcode4 map"
author: "Stan Brouwer <sjbrou@gmail.com>"
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 1
    embed-resources: true
    self-contained: true
    standalone: true
    smooth-scroll: true
    page-layout: full
    code-fold: show
    grid:
      sidebar-width: 120px
    #  margin-width: 180px
editor: source
number-sections: false
---

<style>
/* Adjust the sidebar width and overall grid layout */
.sidebar {
    width: 80px; /* Set the sidebar width to 80px (or any value you prefer) */
}

.grid {
    margin-left: 100px; /* Adjust the margin on the grid to fit your layout */
}

/* Optional: Adjust the content area margin */
.content {
    margin-left: 100px; /* Ensure the content doesn't overlap with the sidebar */
}
</style>


Instructions and examples to plot postcode (4) maps in R


# Methods

Install and load dependencies

```{r startup, message=FALSE, error=FALSE, verbose=FALSE, warning=FALSE}
# clear environment and load dependencies
rm(list = ls())
if (!require("openxlsx")) install.packages("openxlsx")
library(openxlsx)
if (!require("dplyr")) install.packages("dplyr")
library(dplyr)
if (!require("sf")) install.packages("sf")
library(sf)
if (!require("leaflet")) install.packages("leaflet")
library(leaflet)

```

Leaflet is used to draw postcode4 areas over the map. This requires a ShapeFile (SF) containing information on the area of the postcode.

Opendatasoft provides .geojson (and other formats) data of these postcode aress at <https://public.opendatasoft.com/explore/dataset/georef-netherlands-postcode-pc4/information/>.

Downloading and reading decreases performance. Things can be sped up by (1) decreasing the resolution and (2) Preprocessing to .RData file. Since the geojson file is over 100mb, we preproccessed it to an .RData file.

Preprocessing the geojson file from opendatasoft can be done by
```{r preprocessing, message=FALSE, eval=FALSE}
# Eval=FALSE to prevent running this code block
# Assumes geojson data to be at data/postcode4.geojson
geojson_pc4 <- st_read("data/postcode4.geojson") # read using "GeoJSON" driver
geojson_pc4 <- st_simplify(geojson_pc4, dTolerance = 2) # decrease granularity see (1)
geojson_pc4$pc4_code <- as.numeric(geojson_pc4$pc4_code) # change datatype for merging on postcode4 later
save(geojson_pc4, file = "data/postcode4.RData") # save as .RData
```


::: column-margin
1.  the geojson data has high levels of detail and is thus resource intensive to load. Decreasing the resolution does practical not impact the final experience.

2.  Reading .geojson data requires loading the "GeoJSON" driver which takes some time. Preprocessing and storeing it as RData file allows for quick access.
:::

Merge the geographical data with the values to plot

```{r combine_dataframes, message=FALSE, warning=FALSE}
load("data/postcode4.RData")
# Check if data to visualise exists, and otherwise create sample
if (file.exists("data/data.xlsx")) {
  data <- read.xlsx("data/data.xlsx")
} else {
  # Generate sample data if file does not exist. 
  data <- data.frame(
    Postcode = geojson_pc4$pc4_code,
    population = sample(1:10000, length(geojson_pc4$pc4_code), replace = TRUE),  # Random values between 1 and 10000
    Score = sample(c(0,1), length(geojson_pc4$pc4_code), replace = TRUE), # Random values between 0 - 1
    Income = sample(10000:80000, length(geojson_pc4$pc4_code), replace = TRUE), # Randon values between 10k and 80k
    column_to_remove = "1"
  )
  message("No file to visualize found. Generated sample data instead.")
}

# Optionally select columns to display by name, only in case of generated data to ensure no other data is removed. 
if (file.exists("data/load.xlsx")) {
  data <- data[, c("Postcode", "Population", "Score", "Income")] # removes column "column_to_remove" from the dataframe. By default all numerical columns are displayed on hover
}

# Combine dataframes
data <- merge(geojson_pc4, data, by.x = "pc4_code", by.y = "Postcode", all.x = TRUE) # for some reason, the geojson_pc4 must be the first dataframe in the merge to ensure that the leaflet-setVieuw works correct (due to the geometry being added to the data[,1] col?)
data <- data %>%
  rename(Postcode = pc4_code)
rm(geojson_pc4)
```

Time to plot the data!

```{r plot_map, message=FALSE, warning=FALSE}

# Asuming you want to plot the 1st column of data.xslx. (after merging and removing "Postcode" this is the 8th column)
toplot <- names(st_drop_geometry(data[, 8]))  # Get the column name

# Define the color palette
pal <- colorNumeric(palette = "viridis", domain = range(data[[toplot]], na.rm = TRUE), na.color = "transparent")

# Create the map
leaflet(data = data) %>%
  addProviderTiles(providers$OpenStreetMap) %>%
  addPolygons(
    fillColor = ~pal(data[[toplot]]),  # Use the column from the toplot variable
    weight = 1,
    opacity = 1,
    color = "black",
    dashArray = "3",
    fillOpacity = 0.5,
    popup = ~paste0(
      "Postcode: ", data$Postcode, "<br>",
      "Gemeente: ", data$gem_name, "<br>",
      toplot, ": ", data[[toplot]]
    )  # Display Postcode, Gemeente, and the selected column value
  ) %>%
  addLegend(
    pal = pal,
    values = data[[toplot]],  # Use the column from the toplot variable
    title = toplot,  # Title is the column name
    position = "bottomright"
  ) %>%
  setView(
    lng = mean(st_coordinates(data)[, 1]),
    lat = mean(st_coordinates(data)[, 2]),
    zoom = 10
  )
```

# Funciton

requires a .RData file containing the processed geojson data at "postcode4_path"

reqiures an excel file with a column "Postcode" containing the postcal4 codes an corresponding values in column "column_to_plot"

```{r drawmap_function, message=FALSE, warning=FALSE}
draw_postcode4_map <- function(postcode4_path, data_path, column_to_plot) {
  # Function to draw postcode4 maps. 
  # Requires a RData containing the processed geojson data at postcode4_path
  # Requires the excel to have a column "Postcode" containing the postcal4 codes an corresponding values in column "column_to_plot"
  if (!require("readxl")) install.packages("readxl")
  if (!require("dplyr")) install.packages("dplyr")
  if (!require("sf")) install.packages("sf")
  if (!require("leaflet")) install.packages("leaflet")
  library(readxl)
  library(dplyr)
  library(sf)
  library(leaflet)
  
  # Load data
  load(postcode4_path)
  data <- read_excel(data_path)
  
  # Merge the shapefile data with the Excel data
  data <- merge(geojson_pc4, data, by.x = "pc4_code", by.y = "Postcode", all.x = TRUE)
  
  # Rename for clarity
  data <- data %>%
    rename(Postcode = pc4_code)
  
  # Define the color palette based on the selected column
  pal <- colorNumeric(palette = "viridis", domain = range(data[[column_to_plot]], na.rm = TRUE), na.color = "transparent")
  
  # Create the map
  map <- leaflet(data = data) %>%
    addProviderTiles(providers$OpenStreetMap) %>%
    addPolygons(
      fillColor = ~pal(data[[column_to_plot]]),  # Use the column from the toplot variable
      weight = 1,
      opacity = 1,
      color = "black",
      dashArray = "3",
      fillOpacity = 0.5,
      popup = ~paste0(
        "Postcode: ", data$Postcode, "<br>",
        "Gemeente: ", data$gem_name, "<br>",
        column_to_plot, ": ", data[[column_to_plot]]
      )  # Display Postcode, Gemeente, and the selected column value
    ) %>%
    addLegend(
      pal = pal,
      values = data[[column_to_plot]],  # Use the column from the toplot variable
      title = toplot,  # Title is the column name
      position = "bottomright"
    ) %>%
    setView(
      lng = mean(st_coordinates(data)[, 1]),
      lat = mean(st_coordinates(data)[, 2]),
      zoom = 10
    )
  
  # Return the map object
  return(map)
}

# Example usage:
postcode4_map <- draw_postcode4_map("data/postcode4.RData", "data/data.xlsx", "population")
postcode4_map  # This will display the map
```
* Note: population values are randomly generated and do not reflect real population numbers.